<?xml version="1.0" encoding="UTF-8"?>
<!-- Apache ANT build file that sets up (target = setup) or by default converts transaction with references to full ada xml (target = resolve-refs)
    Apache ANT is based on Java and may be found here: https://ant.apache.org/
    run on command line or from a batch file: 
        ant [-f build.xml] [target]
        
    If you just run ant, it expects a build.xml in the working dir and runs the default target.
-->
<project basedir="." default="convert_ada_2_hl7_300" name="build-ada2hl7-lab-300" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <property name="is.version" value="3.0.0"/>
    <property name="is.version.short" value="300"/>
    <property name="date.T" value="2022-01-01"/>

    <property name="echo.label.in" value="ADA"/>
    <property name="echo.label.out" value="HL7"/>
    
    <property name="echo.label" value="${echo.label.in} to ${echo.label.out}"/>

    <!-- place import after properties above, otherwise it can't resolve these properties  -->
    <import file="../../../_ant-buildfiles/ant-publish/build-ada2hl7-lab-include.xml"/>

    <property name="gen.schematron.ref" value="false"/>
    <property name="usecase.nt" value="nictiz_test"/>
    
    <property name="ada.project.source.dir" value="${build.dir}/../../../../../SVN/art_decor/trunk/ada-data/projects/lab"/>
    <property name="validate.dir" value="${build.dir}/../../../../../../SVN/AORTA/branches/Onderhoud_Lu/Publicaties/20220405-Versie-3.0.0/lu-runtime-20220405T135006_svrl"/>
    <property name="schema.organizer" value="${build.dir}/../../../../../../SVN/AORTA/branches/Onderhoud_Lu/XML/schemas_codeGen_flat/organizer.xsd"/>
    <property name="schema.cda" value="${build.dir}/../../../../../../SVN/AORTA/branches/Onderhoud_Lu/XML/schemas_codeGen_flat/CDANL_extended.xsd"/>
    
    <property name="xsl.validate.svrl" value="${build.dir}/../../validate/validate-svrl-output.xsl"/>
    
    <target name="setup_lab300" description="Setup subdirectories, schemas, ada instance xml's in ${build.dir} for ${is.name} ${is.version}">

        <!-- nictiz_test copies appropriate ada instances from refs.dir -->
        <!-- not yet implemented there is no ada project for 9 2.0 yet -->
        <!--<antcall target="setup_sub_instances">
            <param name="fileset.dir" value="ada_instance"/>
            <param name="refs.ada.dir" value="ada_instance"/>
            <param name="usecase" value="${usecase.nt}"/>
        </antcall>-->
        <!-- at the moment only schemas for nictiz test -->
        <antcall target="setup_sub_schemas">
            <param name="usecase" value="${usecase.nt}"/>
            <param name="schema.string" value="*${usecase.labsr}.xsd"/>
        </antcall>

        <!-- laboratoriumresultaten-->
        <antcall target="setup_sub">
            <param name="usecase" value="${usecase.labsr}"/>
            <param name="fileset.dir" value="ada_instance"/>
            <param name="fileset.include" value="*.xml"/>
            <param name="refs.ada.dir" value="ada_instance"/>
        </antcall>
        
        <!-- at the moment only schemas for nictiz test -->
        <antcall target="setup_sub_schemas">
            <param name="usecase" value="${usecase.nt}"/>
            <param name="schema.string" value="*${usecase.labbr}.xsd"/>
        </antcall>
        
        <!-- laboratoriumresultaten-->
        <antcall target="setup_sub">
            <param name="usecase" value="${usecase.labbr}"/>
            <param name="fileset.dir" value="ada_instance"/>
            <param name="fileset.include" value="*.xml"/>
            <param name="refs.ada.dir" value="ada_instance"/>
        </antcall>

        <!-- xml voorbeelden -->
        <!-- schemas -->
        <mkdir dir="${build.dir}/xml-voorbeelden/ada_schemas"/>
        <delete>
            <fileset dir="${build.dir}/xml-voorbeelden/ada_schemas" includes="*.xsd"/>
        </delete>
        <copy todir="${build.dir}/xml-voorbeelden/ada_schemas" failonerror="true">
            <fileset dir="${ada.project.source.dir}/schemas">
                <include name="*${usecase.labsr}.xsd"/>
                <include name="*${usecase.labbr}.xsd"/>
                <include name="ada_meta.xsd"/>
            </fileset>
        </copy>
        <!-- instances -->
        <echo/>
        <echo>Setup ${build.dir}/xml-voorbeelden containing refreshed ada production instances (${refs.dir}/xml-voorbeelden/ada_instance/*example*.xml)</echo>

        <mkdir dir="${build.dir}/xml-voorbeelden/ada_instance"/>
        <delete>
            <fileset dir="${build.dir}/xml-voorbeelden/ada_instance" includes="*example*.xml"/>
        </delete>
        <copy todir="${build.dir}/xml-voorbeelden/ada_instance" failonerror="true">
            <fileset dir="${refs.dir}/xml-voorbeelden/ada_instance">
                <include name="*example*.xml"/>
            </fileset>
        </copy>


        <!-- let's convert to hl7 too while we're at it -->
        <!-- generic stuff for all lab versions -->
        <antcall target="convert_ada_2_hl7_300"/>

    </target>

    <target name="convert_ada_2_hl7_300">

        <!-- convert nictiz test -->
        <!-- <antcall target="convert_ada_2_hl7_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.nt}"/>
            <param name="xsl.name" value="../${usecase.labsr}/payload/${usecase.labsr}_org.xsl"/>
            <param name="xsl.in" value="ada_instance"/>
            <param name="xsl.out" value="hl7_instance"/>
        </antcall>-->
        
        <!-- convert beschikbaarstellen_laboratoriumresultaten -->
        <antcall target="convert_ada_2_hl7_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labbr}"/>
            <param name="xsl.name" value="../${usecase.labbr}/payload/${usecase.labbr}_org.xsl"/>
            <param name="xsl.in" value="ada_instance"/>
            <param name="xsl.out" value="hl7_instance"/>
        </antcall>
        
        <!-- laboratoriumresultaten also to CDA-->
        <antcall target="convert_ada_2_hl7_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labbr}"/>
            <param name="xsl.name" value="../../${organizer.to.cda.xsl}"/>
            <param name="xsl.in" value="hl7_instance"/>
            <param name="xsl.out" value="cda_instance"/>
        </antcall>

        <!-- convert sturen_laboratoriumresultaten -->
        <antcall target="convert_ada_2_hl7_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labsr}"/>
            <param name="xsl.name" value="../${usecase.labsr}/payload/${usecase.labsr}_org.xsl"/>
            <param name="xsl.in" value="ada_instance"/>
            <param name="xsl.out" value="hl7_instance"/>
        </antcall>

        <!-- laboratoriumresultaten also to CDA-->
        <antcall target="convert_ada_2_hl7_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labsr}"/>
            <param name="xsl.name" value="../../${organizer.to.cda.xsl}"/>
            <param name="xsl.in" value="hl7_instance"/>
            <param name="xsl.out" value="cda_instance"/>
        </antcall>

        <!-- also do the examples -->
        <antcall target="convert_ada_2_hl7_examples_300"/>

    </target>

    <target name="convert_ada_2_hl7_examples_300">
        <!-- examples -->
        <echo>Deleting previous results, if any</echo>
        <mkdir dir="${build.dir}/xml-voorbeelden/hl7_instance"/>
        <delete>
            <fileset dir="${build.dir}/xml-voorbeelden/hl7_instance" includes="*.xml"/>
        </delete>
        <mkdir dir="${build.dir}/xml-voorbeelden/cda_instance"/>
        <delete>
            <fileset dir="${build.dir}/xml-voorbeelden/cda_instance" includes="*.xml"/>
        </delete>
        
        <!-- beschikbaarstellen_laboratoriumresultaten -->
        <sequential>
            <fileset id="inputfiles" dir="${build.dir}/xml-voorbeelden/ada_instance" includes="lu*.xml"/>
            
            <echo/>
            <echo>${echo.label} ${build.dir}/${usecase.labbr}/payload/${usecase.labbr}_org.xsl input dir ${build.dir}/xml-voorbeelden/ada_instance</echo>
            <xslt force="true" style="${build.dir}/${usecase.labbr}/payload/${usecase.labbr}_org.xsl" destdir="${build.dir}/xml-voorbeelden/hl7_instance" extension=".xml" useimplicitfileset="false" failonnoresources="false">
                <fileset refid="inputfiles"/>
                <param name="generateInstructionText" expression="true"/>
                <param name="dateT" expression="${date.T}" if="date.T"/>
                <param name="schematronRef" expression="${gen.schematron.ref}" if="gen.schematron.ref"/>
                <factory name="${xsl.saxon.class}"/>
                <classpath location="${xsl.saxon}"/>
            </xslt>
        </sequential>
        
        <!-- sturen_laboratoriumresultaten -->
        <sequential>
            <fileset id="inputfiles" dir="${build.dir}/xml-voorbeelden/ada_instance" includes="lu*.xml"/>

            <echo/>
            <echo>${echo.label} ${build.dir}/${usecase.labsr}/payload/${usecase.labsr}_org.xsl input dir ${build.dir}/xml-voorbeelden/ada_instance</echo>
            <xslt force="true" style="${build.dir}/${usecase.labsr}/payload/${usecase.labsr}_org.xsl" destdir="${build.dir}/xml-voorbeelden/hl7_instance" extension=".xml" useimplicitfileset="false" failonnoresources="false">
                <fileset refid="inputfiles"/>
                <param name="generateInstructionText" expression="true"/>
                <param name="dateT" expression="${date.T}" if="date.T"/>
                <param name="schematronRef" expression="${gen.schematron.ref}" if="gen.schematron.ref"/>
                <factory name="${xsl.saxon.class}"/>
                <classpath location="${xsl.saxon}"/>
            </xslt>
        </sequential>

        <!-- everything also to CDA-->
        <sequential>
            <fileset id="inputfiles" dir="${build.dir}/xml-voorbeelden/hl7_instance" includes="*.xml"/>
            <echo/>
            <echo>${echo.label} ${build.dir}/../${organizer.to.cda.xsl} input dir ${build.dir}/xml-voorbeelden/hl7_instance</echo>
            <xslt force="true" style="${build.dir}/../${organizer.to.cda.xsl}" destdir="${build.dir}/xml-voorbeelden/cda_instance" extension=".xml" useimplicitfileset="false" failonnoresources="false">
                <fileset refid="inputfiles"/>
                <param name="generateInstructionText" expression="true"/>
                <param name="dateT" expression="${date.T}" if="date.T"/>
                <param name="schematronRef" expression="${gen.schematron.ref}" if="gen.schematron.ref"/>
                <factory name="${xsl.saxon.class}"/>
                <classpath location="${xsl.saxon}"/>
            </xslt>
        </sequential>

        <!-- bouwstenen transactions, we don't want cda for those -->
        <!--<sequential>
            <echo/>
            <echo>${echo.label} ${build.dir}/xml-voorbeelden/bouwstenen_transacties/bouwstenen_transacties_org.xsl input files in ${build.dir}/xml-voorbeelden/ada_instance</echo>
            <xslt force="true" style="${build.dir}/xml-voorbeelden/bouwstenen_transacties/bouwstenen_transacties_org.xsl" in="${build.dir}/xml-voorbeelden/bouwstenen_transacties/dummy.xml" out="${build.dir}/xml-voorbeelden/bouwstenen_transacties/dummy-out.xml" useimplicitfileset="false">
                <param name="generateInstructionText" expression="true"/>
                <param name="dateT" expression="${date.T}" if="date.T"/>
                <param name="schematronRef" expression="${gen.schematron.ref}" if="gen.schematron.ref"/>
                <factory name="${xsl.saxon.class}"/>
                <classpath location="${xsl.saxon}"/>
            </xslt>
        </sequential>-->

    </target>

    <target name="schemavalidate_hl7_300">

        <!-- all use cases hl7_instance-->
        <antcall target="schemavalidate_hl7_sub">
            <param name="fileset.include" value="**/hl7_instance/*.xml"/>
            <param name="fileset.exclude" value="nictiz_test/**/*"/>
            <param name="validate.schema" value="${schema.organizer}"/>
        </antcall>

        <!-- all use cases cda_instance-->
        <antcall target="schemavalidate_hl7_sub">
            <param name="fileset.include" value="**/cda_instance/*.xml"/>
            <param name="fileset.exclude" value="nictiz_test/**/*"/>
            <param name="validate.schema" value="${schema.cda}"/>
        </antcall>

    </target>

    <target name="schematronvalidate_hl7_300">

        <!-- first the schematrons per instance -->
        <antcall target="validate_hl7_300"/>
        
        <!-- beschikbaarstellen_laboratoriumresultaten hl7 organizer -->
        <antcall target="schematronresults_hl7_300_sub">
            <param name="result.xml" value="${build.dir}/validate/hl7_${usecase.labbr}.xml"/>
            <param name="input.dir" value="../${is.abbreviation}/${is.version}/${usecase.labbr}/validate_hl7_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>
        <!-- beschikbaarstellen_laboratoriumresultaten cda -->
        <antcall target="schematronresults_hl7_300_sub">
            <param name="result.xml" value="${build.dir}/validate/cda_${usecase.labbr}.xml"/>
            <param name="input.dir" value="../${is.abbreviation}/${is.version}/${usecase.labbr}/validate_cda_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>

        <!-- sturen_laboratoriumresultaten hl7 organizer -->
        <antcall target="schematronresults_hl7_300_sub">
            <param name="result.xml" value="${build.dir}/validate/hl7_${usecase.labsr}.xml"/>
            <param name="input.dir" value="../${is.abbreviation}/${is.version}/${usecase.labsr}/validate_hl7_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>
        <!-- sturen_laboratoriumresultaten cda -->
        <antcall target="schematronresults_hl7_300_sub">
            <param name="result.xml" value="${build.dir}/validate/cda_${usecase.labsr}.xml"/>
            <param name="input.dir" value="../${is.abbreviation}/${is.version}/${usecase.labsr}/validate_cda_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>

    </target>

    <target name="validate_hl7_300">

        <!-- beschikbaarstellen_laboratoriumresultaten -->
        <antcall target="validate_hl7_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labbr}"/>
            <param name="xsl.input" value="hl7_instance"/>
            <param name="xsl.output" value="validate_hl7_instance"/>
            <param name="xsl.lab" value="${validate.dir}/lu-beschikbaarstellenLaboratoriumresultaten.xsl"/>
        </antcall>
        <antcall target="validate_hl7_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labbr}"/>
            <param name="xsl.input" value="cda_instance"/>
            <param name="xsl.output" value="validate_cda_instance"/>
            <param name="xsl.lab" value="${validate.dir}/lu-beschikbaarstellenLaboratoriumresultaten.xsl"/>
        </antcall>

        <!-- sturen_laboratoriumresultaten -->
        <antcall target="validate_hl7_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labsr}"/>
            <param name="xsl.input" value="hl7_instance"/>
            <param name="xsl.output" value="validate_hl7_instance"/>
            <param name="xsl.lab" value="${validate.dir}/lu-sturenLaboratoriumresultaten.xsl"/>
        </antcall>
        <antcall target="validate_hl7_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labsr}"/>
            <param name="xsl.input" value="cda_instance"/>
            <param name="xsl.output" value="validate_cda_instance"/>
            <param name="xsl.lab" value="${validate.dir}/lu-sturenLaboratoriumresultaten.xsl"/>
        </antcall>

        <!-- xml-voorbeelden -->
        <!--<echo/>
        <echo>${echo.label} xml-voorbeelden</echo>
        <xslt force="true" style="${validate.dir}/mp-mp92_mgb.xsl" destdir="${build.dir}/xml-voorbeelden/validate_hl7_instance" extension=".xml" useImplicitFileset="false">
            <fileset dir="${build.dir}/xml-voorbeelden/hl7_instance" includes="mg-*.xml"/>
            <factory name="${xsl.saxon.class}"/>
            <classpath location="${xsl.saxon}"/>
        </xslt>-->

    </target>

    <target name="validate_hl7_sub">
        <echo>Deleting previous results, if any</echo>
        <mkdir dir="${sub.build.dir}/${xsl.output}"/>
        <delete>
            <fileset dir="${sub.build.dir}/${xsl.output}" includes="*.xml"/>
        </delete>

        <fileset id="inputfiles" dir="${sub.build.dir}/${xsl.input}" includes="*.xml"/>

        <echo/>
        <echo>${echo.label} ${xsl.lab} input dir ${sub.build.dir}/${xsl.input}</echo>
        <xslt force="true" style="${xsl.lab}" destdir="${sub.build.dir}/${xsl.output}" extension=".xml" useImplicitFileset="false">
            <fileset refid="inputfiles"/>
            <factory name="${xsl.saxon.class}"/>
            <classpath location="${xsl.saxon}"/>
        </xslt>
    </target>

    <!-- validates xml using xsd -->
    <target name="schemavalidate_hl7_sub">
        
        <fileset id="inputfiles.validate" dir="${build.dir}">
            <include name="${fileset.include}"/>
            <exclude name="${fileset.exclude}"/>
        </fileset>
        
        <echo/>
        <echo>${echo.label} validate schema with input files ${fileset.include} but excluding ${fileset.exclude}  and schema ${validate.schema}</echo>
        <schemavalidate warn="true" failonerror="false">
            <fileset refid="inputfiles.validate"/>
            <schema namespace="urn:hl7-org:v3" file="${validate.schema}"/>
        </schemavalidate>
        
    </target>
    
    <target name="schematronresults_hl7_300_sub">
        
        <echo/>
        <echo>${echo.label} ${xsl.validate.svrl} make recap of validation in ${result.xml}</echo>
        <xslt force="true" style="${xsl.validate.svrl}" in="${build.dir}/validate/default_input.xml" out="${result.xml}">
            <factory name="${xsl.saxon.class}"/>
            <classpath location="${xsl.saxon}"/>
            <param name="inputDir" expression="${input.dir}"/>
            <param name="inputFileSet" expression="${input.fileset}"/>
        </xslt>
        
    </target>
</project>
