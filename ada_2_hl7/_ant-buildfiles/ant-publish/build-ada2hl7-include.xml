<?xml version="1.0" encoding="UTF-8"?>
<!-- Apache ANT build file that sets up (target = setup) or by default converts transaction with references to full ada xml (target = resolve-refs)
    Apache ANT is based on Java and may be found here: https://ant.apache.org/
    run on command line or from a batch file: 
        ant [-f build.xml] [target]
        
    If you just run ant, it expects a build.xml in the working dir and runs the default target.
-->
<project basedir="." name="build-ada2hl7-include" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <!-- this include build xml (build-ada2hl7-include.xml is included from an ant build file with basedir two dirs up, 
        for convenience we place the dependency here 
        so it does not resolve directly from here, but it will resolve fine when run (included) from a build xml with basedir for example: mp/9.0.7 -->
    <ant antfile="../../../../../_ant-buildfiles/ant-include/ant.ivy.xml" inheritall="true" usenativebasedir="true"/>
    <property name="xsl.saxon" value="${saxon.path}"/>
    <property name="xsl.saxon.class" value="net.sf.saxon.TransformerFactoryImpl"/>

    <property name="echo.label.in" value="ADA"/>
    <property name="echo.label.out" value="HL7"/>
    
    <property name="echo.label" value="${echo.label.in} to ${echo.label.out}"/>
    <property name="project.author" value="Nictiz"/>
    <property name="project.website" value="http://www.nictiz.nl/"/>
    <property name="project.status" value="beta"/>
    <property name="project.license" value="GNU-LGPL"/>
    <property name="project.copyright" value="true"/>
    <property name="project.description" value="Contains all relevant materials to convert valid ${echo.label.in} instances for ${is.name} to  ${echo.label.out}"/>
    <property name="project.prefix" value="${is.abbreviation}_${is.version}"/>
    <property name="dummy.output.dir" value="../../dummy"/>
    
    

    <target name="setup_sub" description="Setup ${build.dir}/${usecase} containing the new/schemas folder from the original ADA project and refreshed ada instances from test_xslt">

        <antcall target="setup_sub_schemas">
            <param name="schema.string" value="*${usecase}.xsd"/>
        </antcall>

        <antcall target="setup_sub_instances">
            <param name="fileset.dir" value="${fileset.dir}"/>
            <param name="fileset.include" value="${fileset.include}"/>
            <param name="refs.ada.dir" value="${refs.ada.dir}"/>
            <param name="usecase" value="${usecase}"/>
        </antcall>

    </target>

    <target name="setup_sub_schemas" description="Setup ${build.dir}/${usecase} containing the new/schemas folder from the original ADA project">
        <echo/>
        <echo>Setup ${build.dir}/${usecase} containing refreshed ada schemas (${schema.string})</echo>
        
        <mkdir dir="${build.dir}/${usecase}/ada_schemas"/>
        <delete>
            <fileset dir="${build.dir}/${usecase}/ada_schemas" includes="*.xsd"/>
        </delete>

        <copy todir="${build.dir}/${usecase}/ada_schemas" failonerror="true">
            <fileset dir="${ada.project.source.dir}/schemas">
                <include name="${schema.string}"/>
                <include name="ada_meta.xsd"/>
            </fileset>
        </copy>

    </target>

    <target name="setup_sub_instances" description="Setup ${build.dir}/${usecase} containing refreshed ada production instances (${fileset.dir}/${fileset.include})">

        <echo/>
        <echo>Setup ${build.dir}/${usecase} containing refreshed ada production instances (${fileset.include})</echo>

        <mkdir dir="${build.dir}/${usecase}/${fileset.dir}"/>
        <delete>
            <fileset dir="${build.dir}/${usecase}/${fileset.dir}" includes="${fileset.include}"/>
        </delete>
        <copy todir="${build.dir}/${usecase}/${fileset.dir}" failonerror="true">
            <fileset dir="${refs.dir}/${usecase}/${refs.ada.dir}">
                <include name="${fileset.include}"/>
            </fileset>
        </copy>

    </target>

</project>
