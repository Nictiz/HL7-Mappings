<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" basedir="." name="generateTestScripts" default="build">
    <property name="project" value="Medication-9-0-7"/>
    
    <property name="ivy.install.version" value="2.5.0-rc1" />
    <property name="ivy.jar.file" value="${ant.library.dir}/ivy.jar" />
    
    <property name="build.dir" value="build" />
    <property name="src.dir" value="src" />
    <property name="lib.dir" value="lib"/>
    <property name="ivy.local.jar.file" value="${lib.dir}/ivy.jar" />
    
    <!-- IVY -->
    
    <target name="check-ivy">
        <condition property="ivy.exists" else="false">
            <or>
                <available file="${ivy.jar.file}" type="file"/>
                <available file="${ivy.local.jar.file}" type="file"/>
            </or>
        </condition>
    </target>
    
    <target name="download-ivy" depends="check-ivy" unless="ivy.exists">
        <mkdir dir="${lib.dir}"/>
        <echo message="installing ivy..."/>
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.local.jar.file}" usetimestamp="true"/>
    </target>
    
    <target name="install-ivy" depends="download-ivy" unless="ivy.exists, ivy.loaded">
        <path id="ivy.lib.path">
            <fileset dir="${lib.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
            uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <property name="ivy.loaded" value="true" />
    </target>
    
    <!-- SAXON, ANT-CONTRIB -->
    
    <target name="retrieve" depends="check-ivy, install-ivy">
        <ivy:retrieve/>
        <ivy:artifactproperty name="[module].[artifact]" value="lib/[artifact]-[revision].[ext]" />
    </target>
    
    <target name="load" depends="retrieve" unless="ant.contrib.loaded">
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <pathelement location="${ant-contrib.ant-contrib}" />
            </classpath>
        </taskdef>
        <property name="ant.contrib.loaded" value="true" />
    </target>
    
    <!-- BUILD XML -->
    
    <target name="build" depends="load">
        <path id="basedir.path">
            <pathelement path="${basedir}\..\${project}" />
        </path>
        <pathconvert targetos="unix" property="basedir.unix" refid="basedir.path"/>
        
        <fileset id="input" dir="../${project}">
            <include name="**/*.xml"/>
            <exclude name="**/_*/"/><!-- Exclude every dir that starts with '_' -->
        </fileset>
        
        <for param="file">
            <path>
                <fileset refid="input"/>
            </path>
            <sequential>
                <local name="expectedResponseFormatList"/>
                <local name="file.basename"/>
                <!-- All variables extracted from xmlproperty should be declared local -->
                <local name="TestScript.id(nts:scenario)"/>
                
                <basename property="file.basename" file="@{file}"/>
                
                <xmlproperty file="@{file}"/>
                
                <if>
                    <equals arg1="${TestScript(nts:scenario)}" arg2="server"/>
                    <then>
                        <property name="expectedResponseFormatList" value="xml,json"/>
                    </then>
                    <else>
                        <property name="expectedResponseFormatList" value="xml"/>
                    </else>
                </if>
                
                <for list="${expectedResponseFormatList}" param="expectedResponseFormat">
                    <sequential>
                        <xslt force="true" style="../${src.dir}/xslt/generateTestScript.xsl" in="@{file}" out="../${build.dir}/${project}/${file.basename}-@{expectedResponseFormat}.xml">                            
                            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
                            <classpath location="${net.sf.saxon.Saxon-HE}"/>
                            <param name="inputDir" expression="file:/${basedir.unix}"/>
                            <param name="referenceFolder" expression="_reference"/>
                            <param name="commonComponentFolder" expression="../${src.dir}/common-asserts"/>
                            <param name="projectComponentFolder" expression="_components"/>
                            <param name="expectedResponseFormat" expression="@{expectedResponseFormat}"/>
                        </xslt>
                    </sequential>
                </for>
                
            </sequential>
        </for>
    </target>
    
</project>