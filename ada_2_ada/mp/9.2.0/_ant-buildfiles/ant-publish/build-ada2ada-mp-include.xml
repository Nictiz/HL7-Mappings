<?xml version="1.0" encoding="UTF-8"?>
<!-- Apache ANT build file that sets up (target = setup) or by default converts transaction with references to full ada xml (target = resolve-refs)
    Apache ANT is based on Java and may be found here: https://ant.apache.org/
    run on command line or from a batch file: 
        ant [-f build.xml] [target]
        
    If you just run ant, it expects a build.xml in the working dir and runs the default target.
-->
<project basedir="." default="resolve-refs_sub" name="build-ada2ada-mp-include" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <echo message="${basedir}"/>
    <ant antfile="../../../../../_ant-buildfiles/ant-include/ant.ivy.xml" inheritall="true" usenativebasedir="true"/>

    <property name="xsl.saxon" value="${saxon.path}"/>
    <property name="xsl.saxon.class" value="net.sf.saxon.TransformerFactoryImpl"/>

    <property name="echo.label.in" value="ADA-REFS"/>
    <property name="echo.label.out" value="ADA-FULL"/>
    <property name="echo.label" value="${echo.label.in} to ${echo.label.out}"/>

    <property name="is.name" value="Medicatieproces"/>
    <property name="is.abbreviation" value="mp"/>

    <property name="project.author" value="Nictiz"/>
    <property name="project.website" value="http://www.nictiz.nl/"/>
    <property name="project.status" value="beta"/>
    <property name="project.license" value="GNU-LGPL"/>
    <property name="project.copyright" value="true"/>

    <property name="build.dir" value="../.."/><!--9.2.0-->
    <property name="dummy.output.dir" value="dummy"/>
    <!--no project folder-->
    <!--<property name="ada.project.source.dir" value="${build.dir}\..\..\..\projects\${is.abbreviation}-${is.abbreviation}${is.version.short}"/>-->

    
    <!--    <property name="ada.project.source.dir" value="C:\SVN\art_decor\trunk\ada-data\projects\${is.abbreviation}-${is.abbreviation}${is.version.short}"/>-->
<!--    <property name="refs.dir" value="C:\SVN\art_decor\trunk\ada-data\ada2ada\${is.abbreviation}\${is.version}"/>-->

    <!-- place import exactly here, otherwise it can't resolve the properties above, or we can't resolve some properties below, such as ${echo.label.in} -->
    <!--    <import file="../../../_ant-buildfiles/ant-publish/build-ada2ada-include.xml"/>-->

    <property name="echo.label" value="${echo.label.in} to ${echo.label.out}"/>
    <property name="project.title" value="${echo.label} for ${is.name} ${is.version}"/>
    <property name="project.description" value="Contains all relevant materials to convert valid ${echo.label.in} instances for ${is.name} ${is.version} building blocks to valid ${echo.label.out} instances"/>

    <property name="usecase.mg" value="beschikbaarstellen_medicatiegegevens"/>
    <property name="usecase.mg.rp" value="raadplegen_medicatiegegevens"/>
    <property name="usecase.mo" value="beschikbaarstellen_medicatieoverzicht"/>
    <property name="usecase.mo.rp" value="raadplegen_medicatieoverzicht"/>
    <property name="usecase.mv" value="sturen_medicatievoorschrift"/>
    <property name="usecase.av" value="sturen_afhandeling_medicatievoorschrift"/>
    <property name="usecase.vv" value="beschikbaarstellen_verstrekkingenvertaling"/>
    
    <!-- references usecases -->
    <property name="usecase.mgr" value="medicatiegegevens_met_references"/>
    <property name="usecase.mor" value="medicatieoverzicht_met_references"/>
    <property name="usecase.mvr" value="medicatievoorschrift_met_references"/>
    <property name="usecase.var" value="afhandelen_medicatievoorschrift_met_references"/>


    <target name="setup_sub" description="Setup ${sub.build.dir} containing the new/schemas folder from the original ADA project and refreshed ada production instances">
        <!--sub.build.dir invalid-->
        <!--        <antcall target="setup_sub_schemas">
            <param name="sub.build.dir" value="${sub.build.dir}"/>
            <param name="schema.string" value="${schema.string}"/>
        </antcall>-->

        <antcall target="setup_sub_instances">
            <param name="sub.build.dir" value="${sub.build.dir}"/>
            <param name="fileset.include" value="${fileset.include}"/>
        </antcall>

    </target>

    <target name="setup_sub_schemas" description="Setup ${sub.build.dir} containing the new/schemas folder from the original ADA project">
        <!--wrong sub.build.dir, schemas already in place-->
<!--        <echo>Setup ${sub.build.dir} containing the new/schemas folder from the original ADA project: ${ada.project.source.dir}/schemas, using include string: ${schema.string}</echo>
        
        <mkdir dir="${sub.build.dir}/ada_schemas"/>
        <delete>
            <fileset dir="${sub.build.dir}/ada_schemas">
                <include name="*.xsd"/>
            </fileset>
        </delete>
        <copy todir="${sub.build.dir}/ada_schemas" failonerror="true">
            <fileset dir="${ada.project.source.dir}/schemas">
                <include name="${schema.string}"/>
                <include name="ada_meta.xsd"/>
            </fileset>
        </copy>
-->
    </target>

    <target name="setup_sub_instances" description="Setup ${sub.build.dir} containing refreshed ada production instances">
<!--
        <mkdir dir="${sub.build.dir}/ada_instance"/>
        <delete>
            <fileset dir="${sub.build.dir}/ada_instance">
                <include name="*.xml"/>
            </fileset>
        </delete>
        <copy todir="${sub.build.dir}/ada_instance" failonerror="true">
            <fileset dir="${build.dir}/../../../production-ada-instances/${is.abbreviation}/${is.version}/data/">
                <include name="${fileset.include}"/>
            </fileset>
        </copy>-->

    </target>


    <target name="resolve-refs_sub">
        <property name="xsl.mp" value="${sub.build.dir}/${xsl.name}"/>
        <property name="xsl.input" value="${sub.build.dir}/${xsl.inputdir}"/>

        <!-- get rid of old results -->
        <mkdir dir="${sub.build.dir}/${output.result.dir}"/>
        <delete>
            <fileset dir="${sub.build.dir}/${output.result.dir}">
                <include name="*.xml"/>
            </fileset>
        </delete>

        <sequential>
            <fileset id="inputfilesMP" dir="${xsl.input}" includes="*.xml"/>

            <echo/>
            <echo>${echo.label} ${xsl.mp}</echo>
            <xslt force="true" style="${xsl.mp}" destdir="${dummy.output.dir}" extension=".xml" useImplicitFileset="false">
                <param name="outputDir" expression="${build.dir}/${output.result.dir}" if="output.result.dir"/>
                <param name="outputDirRaadplegen" expression="${build.dir}/${output.result.dir.raadplegen}" if="output.result.dir.raadplegen"/>
                <fileset refid="inputfilesMP"/>
                <factory name="${xsl.saxon.class}"/>
                <classpath location="${xsl.saxon}"/>
            </xslt>
        </sequential>

    </target>


</project>
