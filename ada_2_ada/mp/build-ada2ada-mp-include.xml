<?xml version="1.0" encoding="UTF-8"?>
<!--ant -Dinput=mg (or mg, mo, mgr, mor, mvr, var or all)
    Apache ANT build file that sets up (target = setup) or by default converts transaction with references to full ada xml (target = resolve-refs)
    Apache ANT is based on Java and may be found here: https://ant.apache.org/
    run on command line or from a batch file: 
        ant [-f build.xml] [target]
        
    If you just run ant, it expects a build.xml in the working dir and runs the default target.
-->
<project basedir="." default="main" name="build-ada2ada-mp-include" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>



    <fail message="no valid parameter value (-Dpar=xx[x]): mg, mo, mgr, mor, mvr, var or all ">
        <condition>
            <not>
                <or>
                    <equals arg1="${par}" arg2="mg"/>
                    <equals arg1="${par}" arg2="mo"/>
                    <equals arg1="${par}" arg2="mgr"/>
                    <equals arg1="${par}" arg2="mor"/>
                    <equals arg1="${par}" arg2="mvr"/>
                    <equals arg1="${par}" arg2="var"/>
                    <equals arg1="${par}" arg2="all"/>
                    <!-- not implemented
                <equals arg1="${par}" arg2="mgrp"/>
                <equals arg1="${par}" arg2="morp"/>
                <equals arg1="${par}" arg2="mv"/>
                <equals arg1="${par}" arg2="av"/>
                <equals arg1="${par}" arg2="vv"/>-->
                </or>
            </not>
        </condition>
    </fail>



    <property name="xsl.saxon" value="${saxon.path}"/>
    <property name="xsl.saxon.class" value="net.sf.saxon.TransformerFactoryImpl"/>

    <property name="echo.label.in" value="ADA-REFS"/>
    <property name="echo.label.out" value="ADA-FULL"/>
    <property name="echo.label" value="${echo.label.in} to ${echo.label.out}"/>

    <property name="is.name" value="Medicatieproces"/>
    <property name="is.abbreviation" value="mp"/>

    <property name="project.author" value="Nictiz"/>
    <property name="project.website" value="http://www.nictiz.nl/"/>
    <property name="project.status" value="beta"/>
    <property name="project.license" value="GNU-LGPL"/>
    <property name="project.copyright" value="true"/>

    <property name="build.dir" value="${basedir}/../.."/>
    <!--9.2.0-->
    <property name="dummy.output.dir" value="dummy"/>
    <!--no project folder-->
    <!--<property name="ada.project.source.dir" value="${build.dir}\..\..\..\projects\${is.abbreviation}-${is.abbreviation}${is.version.short}"/>-->


    <!--    <property name="ada.project.source.dir" value="C:\SVN\art_decor\trunk\ada-data\projects\${is.abbreviation}-${is.abbreviation}${is.version.short}"/>-->
    <!--    <property name="refs.dir" value="C:\SVN\art_decor\trunk\ada-data\ada2ada\${is.abbreviation}\${is.version}"/>-->

    <!-- place import exactly here, otherwise it can't resolve the properties above, or we can't resolve some properties below, such as ${echo.label.in} -->
    <!--    <import file="../../../_ant-buildfiles/ant-publish/build-ada2ada-include.xml"/>-->

    <property name="echo.label" value="${echo.label.in} to ${echo.label.out}"/>
    <property name="project.title" value="${echo.label} for ${is.name} ${is.version}"/>
    <property name="project.description"
        value="Contains all relevant materials to convert valid ${echo.label.in} instances for ${is.name} ${is.version} building blocks to valid ${echo.label.out} instances"/>
    <property name="input.dir" value="ada_instance"/>
    <property name="output.dir" value="ada_instance_converted"/>

    <target name="testAllValue">
        <condition property="doAll">
            <equals arg1="${par}" arg2="all"/>
        </condition>
    </target>

    <target name="main">
        <sequential>
            <echo message="parameter is: ${par}"/>
            <ant antfile="../../../../../_ant-buildfiles/ant-include/ant.ivy.xml" inheritall="true" usenativebasedir="true"/>
            <echo message="task: main"/>
            <echo message="build.dir: ${build.dir}"/>
            <echo message="basedir: ${basedir}"/>
            <if>
                <equals arg1="${par}" arg2="all"/>
                <then>
                    <var name="list" value="mg,mo,mgr,mor,mvr,var"/>
                </then>
                <else>
                    <var name="list" value="${par}"/>
                </else>
            </if>
            <foreach list="${list}" param="item" parallel="false" inheritall="yes" target="resolve-refs_sub" delimiter=","/>
        </sequential>
    </target>


    <target name="resolve-refs_sub">
        <sequential>
            <property name="xsl.preName" value="ada_"/>
            <property name="xsl.postName" value="_907_to_920.xsl"/>
            <echo message="task: resolve-refs_sub; item: ${item}"/>
            <local name="localitem"/>
            <property name="localitem" value="${item}"/>
            <if>
                <equals arg1="${localitem}" arg2="mg"/>
                <then>
                    <echo message="MG"/>
                    <var name="xsl.midName" value="mg"/>
                    <var name="usecase" value="beschikbaarstellen_medicatiegegevens"/>
                </then>
                <elseif>
                    <equals arg1="${localitem}" arg2="mgr"/>
                    <then>
                        <echo message="MGR"/>
                        <var name="xsl.midName" value="mgr"/>
                        <var name="usecase" value="medicatiegegevens_met_references"/>
                    </then>
                </elseif>
                <elseif>
                    <equals arg1="${localitem}" arg2="mo"/>
                    <then>
                        <echo message="MO"/>
                        <var name="xsl.midName" value="mo"/>
                        <var name="usecase" value="beschikbaarstellen_medicatieoverzicht"/>
                    </then>
                </elseif>
                <elseif>
                    <equals arg1="${localitem}" arg2="mor"/>
                    <then>
                        <echo message="MOR"/>
                        <var name="xsl.midName" value="mor"/>
                        <var name="usecase" value="medicatieoverzicht_met_references"/>
                    </then>
                </elseif>
                <elseif>
                    <equals arg1="${localitem}" arg2="mvr"/>
                    <then>
                        <echo message="MVR"/>
                        <var name="xsl.midName" value="mvr"/>
                        <var name="usecase" value="medicatievoorschrift_met_references"/>
                    </then>
                </elseif>
                <elseif>
                    <equals arg1="${localitem}" arg2="var"/>
                    <then>
                        <echo message="VAR"/>
                        <var name="xsl.midName" value="var"/>
                        <var name="usecase" value="afhandelen_medicatievoorschrift_met_references"/>
                    </then>
                </elseif>
            </if>
            <property name="xsl.mp" value="${build.dir}/${usecase}/payload/${xsl.preName}${xsl.midName}${xsl.postName}"/>
            <property name="xsl.input" value="${build.dir}/${usecase}/${input.dir}"/>
            <!-- get rid of old results -->
            <mkdir dir="${build.dir}/${usecase}/${output.dir}"/>
            <echo message="deleting ${build.dir}/${usecase}/${output.dir}"/>

            <delete>
                <fileset dir="${build.dir}/${usecase}/${output.dir}">
                    <include name="*.xml"/>
                </fileset>
            </delete>
            <fileset id="inputfilesMP" dir="${build.dir}/${usecase}/${input.dir}" includes="*.xml"/>
            <echo
                message="Contains all relevant materials to convert valid ${echo.label.in} instances for ${is.name} ${is.version} building blocks to valid ${echo.label.out} instances"/>


            <xslt force="true" style="${xsl.mp}" destdir="${build.dir}/${usecase}/${output.dir}" extension=".xml" useImplicitFileset="false">
                <!-- never used: <param name="outputDirRaadplegen" expression="${build.dir}/${output.result.dir.raadplegen}" if="output.result.dir.raadplegen"/>-->
                <fileset refid="inputfilesMP"/>
                <factory name="${xsl.saxon.class}"/>
                <classpath location="${xsl.saxon}"/>
            </xslt>
        </sequential>
    </target>



<!--    <!-\-keep for copying external files?-\->
    <target name="setup_sub"
        description="Setup ${sub.build.dir} containing the new/schemas folder from the original ADA project and refreshed ada production instances">
        <!-\-sub.build.dir invalid-\->
        <!-\-        <antcall target="setup_sub_schemas">
            <param name="sub.build.dir" value="${sub.build.dir}"/>
            <param name="schema.string" value="${schema.string}"/>
        </antcall>-\->
        <!-\-        <antcall target="setup_sub_instances">
            <param name="sub.build.dir" value="${sub.build.dir}"/>
            <param name="fileset.include" value="${fileset.include}"/>
        </antcall>
-\->
    </target>

    <target name="setup_sub_schemas" description="Setup ${sub.build.dir} containing the new/schemas folder from the original ADA project">
        <!-\-wrong sub.build.dir, schemas already in place-\->
        <!-\-    
        <mkdir dir="${sub.build.dir}/ada_schemas"/>
        <delete>
            <fileset dir="${sub.build.dir}/ada_schemas">
                <include name="*.xsd"/>
            </fileset>
        </delete>
        <copy todir="${sub.build.dir}/ada_schemas" failonerror="true">
            <fileset dir="${ada.project.source.dir}/schemas">
                <include name="${schema.string}"/>
                <include name="ada_meta.xsd"/>
            </fileset>
        </copy>
-\->
    </target>

    <target name="setup_sub_instances" description="Setup ${sub.build.dir} containing refreshed ada production instances">
        <!-\-
        <mkdir dir="${sub.build.dir}/ada_instance"/>
        <delete>
            <fileset dir="${sub.build.dir}/ada_instance">
                <include name="*.xml"/>
            </fileset>
        </delete>
        <copy todir="${sub.build.dir}/ada_instance" failonerror="true">
            <fileset dir="${build.dir}/../../../production-ada-instances/${is.abbreviation}/${is.version}/data/">
                <include name="${fileset.include}"/>
            </fileset>
        </copy>-\->
    </target>
-->





</project>
